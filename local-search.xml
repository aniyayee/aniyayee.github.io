<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>rookie Java</title>
    <link href="/2023/07/29/rookie%20Java/"/>
    <url>/2023/07/29/rookie%20Java/</url>
    
    <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h2><h3 id="divide"><a href="#divide" class="headerlink" title="divide"></a>divide</h3><p>在 Java 中，<code>BigDecimal</code> 类提供了 <code>divide</code> 方法用于执行除法运算。<code>divide</code> 方法有多个重载版本，可以用于执行不同类型的除法操作。</p><p>方法签名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title function_">divide</span><span class="hljs-params">(BigDecimal divisor)</span><br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>divisor</code>：除数，表示要将当前 <code>BigDecimal</code> 对象除以的值。</li></ul><p>方法返回值：</p><ul><li>返回一个新的 <code>BigDecimal</code> 对象，表示当前 <code>BigDecimal</code> 对象除以 <code>divisor</code> 后的结果。</li></ul><p>除了上述的简单版本，<code>BigDecimal</code> 的 <code>divide</code> 方法还有其他重载版本，可以用于指定除法运算的精度（小数位数）和舍入模式。以下是一个带有精度和舍入模式参数的重载版本：</p><p>方法签名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title function_">divide</span><span class="hljs-params">(BigDecimal divisor, <span class="hljs-type">int</span> scale, RoundingMode roundingMode)</span><br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>divisor</code>：除数，表示要将当前 <code>BigDecimal</code> 对象除以的值。</li><li><code>scale</code>：指定除法运算的精度，即结果的小数位数。</li><li><code>roundingMode</code>：舍入模式，用于处理除不尽的情况。</li></ul><p>方法返回值：</p><ul><li>返回一个新的 <code>BigDecimal</code> 对象，表示当前 <code>BigDecimal</code> 对象除以 <code>divisor</code> 后的结果，并根据指定的精度和舍入模式进行舍入。</li></ul><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;10&quot;</span>);<br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;3&quot;</span>);<br><br>    <span class="hljs-comment">// 简单的除法运算</span><br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> num1.divide(num2);<br>    System.out.println(result1); <span class="hljs-comment">// 输出：3.333333333333333333333333333333333333333333333333333333333333</span><br><br>    <span class="hljs-comment">// 指定精度和舍入模式的除法运算</span><br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> num1.divide(num2, <span class="hljs-number">2</span>, RoundingMode.HALF_UP);<br>    System.out.println(result2); <span class="hljs-comment">// 输出：3.33</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在上述示例中，我们创建了两个 <code>BigDecimal</code> 对象 <code>num1</code> 和 <code>num2</code>，然后进行了除法运算。首先使用简单的 <code>divide</code> 方法进行除法运算，得到的结果是一个无限循环的小数。接着，我们使用带有精度和舍入模式参数的 <code>divide</code> 方法，将结果舍入到小数点后两位，得到了结果 “3.33”。可以看到，指定精度和舍入模式可以控制除法运算结果的精确度。</p><p>总结：<code>BigDecimal</code> 类的 <code>divide</code> 方法可以用于执行除法运算，并且提供了多个重载版本，以支持不同精度和舍入模式的除法计算。</p><h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p><code>Map</code> 接口中的 <code>merge</code> 方法用于合并两个映射中的键值对。它可以用于向一个 Map 中添加新的键值对，或者更新已有键对应的值。</p><p>方法签名如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">V <span class="hljs-title function_">merge</span><span class="hljs-params">(K key, V value, BiFunction&lt;? <span class="hljs-built_in">super</span> V, ? <span class="hljs-built_in">super</span> V, ? extends V&gt; remappingFunction)</span><br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p><code>key</code>：要合并的键。</p></li><li><p><code>value</code>：要合并的值。</p></li><li><p><code>remappingFunction</code>：合并函数，用于处理重复的键值对。它是一个函数式接口 </p><p><code>BiFunction</code>，接受两个参数，并返回一个值。该函数接收两个参数：</p><ul><li><code>existingValue</code>：当前 Map 中与指定键关联的值（如果存在），如果键不存在则为 null。</li><li><code>newValue</code>：要合并的值。</li></ul></li></ul><p>方法返回值：</p><ul><li><p>方法返回合并后的值。如果指定的键在当前 Map 中不存在，或与指定键关联的值为 null，则将指定的键值对直接添加到当前 Map 中，并返回要合并的值。</p><p>如果指定的键在当前 Map 中存在，并且与指定键关联的值不为 null，则使用合并函数处理重复的键值对，并返回合并后的值。</p></li></ul><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    Map&lt;String, Integer&gt; inventory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    inventory.put(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-number">10</span>);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">productName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;apple&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">additionalQuantity</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>    <span class="hljs-comment">// 合并新的库存量到 Map 中</span><br>    inventory.merge(productName, additionalQuantity,<br>        (existingQuantity, newQuantity) -&gt; existingQuantity + newQuantity);<br><br>    System.out.println(inventory); <span class="hljs-comment">// 输出：&#123;apple=30&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在上述示例中，我们首先创建了一个 <code>HashMap</code>，其中包含了产品名称和库存量的映射。接着，我们希望将新的库存量（20）合并到 Map 中的 “apple” 产品中。使用 <code>merge</code> 方法，我们找到 “apple” 对应的库存量（10），然后将新的库存量（20）与当前库存量相加得到 30，并将其更新到 Map 中。最终的结果是 <code>inventory</code> 中包含键值对 “apple&#x3D;30”。</p><p>这就是 <code>Map</code> 接口中 <code>merge</code> 方法的使用方法。它是一个很实用的方法，可以方便地处理 Map 中的键值对合并和更新操作。</p><h3 id="computeIfAbsent"><a href="#computeIfAbsent" class="headerlink" title="computeIfAbsent"></a>computeIfAbsent</h3><p><code>computeIfAbsent</code> 用于根据指定的键获取对应的值，如果键不存在，则通过一个函数计算生成新值并将其放入到 <code>Map</code> 中。</p><p>方法签名如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">V <span class="hljs-title function_">computeIfAbsent</span><span class="hljs-params">(K key, Function&lt;? <span class="hljs-built_in">super</span> K, ? extends V&gt; mappingFunction)</span><br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>key</code>：要获取值的键。</li><li><code>mappingFunction</code>：生成新值的函数，它是一个函数式接口 <code>Function</code>，接受一个参数（即键 <code>key</code>），并返回生成的新值。</li></ul><p>方法返回值：</p><ul><li>如果 <code>key</code> 存在于 <code>Map</code> 中，则返回与键关联的值。</li><li>如果 <code>key</code> 不存在于 <code>Map</code> 中，则根据 <code>mappingFunction</code> 函数计算生成新值，并将新键值对添加到 <code>Map</code> 中，并返回新值。</li></ul><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    Map&lt;String, Integer&gt; inventory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    inventory.put(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-number">10</span>);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">productName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;banana&quot;</span>;<br><br>    <span class="hljs-comment">// 获取指定键对应的值，如果键不存在则使用函数生成新值</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">quantity</span> <span class="hljs-operator">=</span> inventory.computeIfAbsent(productName, key -&gt; <span class="hljs-number">0</span>);<br><br>    System.out.println(inventory); <span class="hljs-comment">// 输出：&#123;apple=10, banana=0&#125;</span><br>    System.out.println(quantity); <span class="hljs-comment">// 输出：0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在上述示例中，我们首先创建了一个 <code>HashMap</code>，其中包含了产品名称和库存量的映射。接着，我们尝试使用 <code>computeIfAbsent</code> 方法获取键 “banana” 对应的值，由于该键不存在于 <code>inventory</code> 中，因此根据提供的 <code>mappingFunction</code> 函数计算生成新值 0，并将新的键值对 “banana&#x3D;0” 添加到 <code>inventory</code> 中，并返回新值 0。</p><p>注意，<code>computeIfAbsent</code> 方法在获取值时会检查键是否存在，如果键已存在，则不会执行 <code>mappingFunction</code> 函数。如果键不存在，则会执行 <code>mappingFunction</code> 函数生成新值并添加到 <code>Map</code> 中。</p><p>这就是 <code>Map</code> 接口中 <code>computeIfAbsent</code> 方法的使用方法。它非常方便，可以在需要根据键来生成新值并添加到 <code>Map</code> 中的场景中使用。</p><h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><h3 id="singletonList"><a href="#singletonList" class="headerlink" title="singletonList"></a>singletonList</h3><p><code>Collections</code> 类中的 <code>singletonList</code> 方法用于创建一个包含单个元素的不可变（immutable）列表（List）。这个列表只包含一个元素，长度固定为 1，因此无法对其进行添加或删除元素的操作。</p><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// 使用 singletonList 方法创建一个包含单个元素的不可变列表</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">singleElement</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>    List&lt;String&gt; list = Collections.singletonList(singleElement);<br><br>    <span class="hljs-comment">// 尝试修改列表内容，将会抛出 UnsupportedOperationException 异常</span><br>    <span class="hljs-comment">// list.add(&quot;World&quot;); // 试图修改不可变列表，抛出异常</span><br><br>    <span class="hljs-comment">// 访问列表元素</span><br>    System.out.println(<span class="hljs-string">&quot;List contains: &quot;</span> + list.get(<span class="hljs-number">0</span>)); <span class="hljs-comment">// 输出: List contains: Hello</span><br>    System.out.println(<span class="hljs-string">&quot;List size: &quot;</span> + list.size()); <span class="hljs-comment">// 输出: List size: 1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，我们首先使用 <code>singletonList</code> 方法创建一个包含单个元素 “Hello” 的不可变列表。由于该列表是不可变的，试图使用 <code>add</code> 方法添加元素 “World” 将会抛出 <code>UnsupportedOperationException</code> 异常。</p><p><code>singletonList</code> 方法在一些情况下非常有用，特别是当我们需要创建只包含一个元素的列表，并且希望保证列表内容不会被改变时。请注意，由于返回的列表是不可变的，因此在实际使用时，我们要确保不会对该列表进行修改操作。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>rookie Hexo</title>
    <link href="/2023/07/27/rookie%20Hexo/"/>
    <url>/2023/07/27/rookie%20Hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清除缓存</span><br>$ hexo cl<br><br><span class="hljs-comment"># 生成静态文件</span><br>$ hexo g<br><br><span class="hljs-comment"># 运行本地服务</span><br>$ hexo s<br><br><span class="hljs-comment"># 部署到远程站点</span><br>$ hexo d<br></code></pre></td></tr></table></figure><h1 id="FIX"><a href="#FIX" class="headerlink" title="FIX"></a>FIX</h1><ul><li>FATAL Port 4000 has been used. Try other port instead.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 根据端口号查找对应的PID</span><br>$ netstat -ano | findstr 4000<br><br><span class="hljs-comment"># 根据PID找进程名称</span><br>$ tasklist | findstr 8860<br><br><span class="hljs-comment"># 根据PID结束对应进程</span><br>$ taskkill -PID 8860 -F<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
